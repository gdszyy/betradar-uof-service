package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"uof-service/config"
	"uof-service/database"
	"uof-service/services"
	"uof-service/web"
)

func main() {
	// ÈÖçÁΩÆÊó•ÂøóËæìÂá∫Âà∞ stdout (ÊòæÁ§∫‰∏∫ [info])
	log.SetOutput(os.Stdout)
	log.SetFlags(log.LstdFlags)
	
	log.Println("Starting Betradar UOF Service...")

	// Âä†ËΩΩÈÖçÁΩÆ
	cfg := config.Load()

	// ËøûÊé•Êï∞ÊçÆÂ∫ì
	db, err := database.Connect(cfg.DatabaseURL)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer db.Close()

	// ËøêË°åÊï∞ÊçÆÂ∫ìËøÅÁßª
	if err := database.Migrate(db); err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}

	log.Println("Database connected and migrated")

	// ÂàõÂª∫ Feishu ÈÄöÁü•Âô®
	larkNotifier := services.NewLarkNotifier(cfg.LarkWebhook)
	
	// ÂèëÈÄÅÊúçÂä°ÂêØÂä®ÈÄöÁü•
	if err := larkNotifier.NotifyServiceStart(cfg.BookmakerID, cfg.Products); err != nil {
		log.Printf("Failed to send startup notification: %v", err)
	}

	// ÂàõÂª∫Ê∂àÊÅØÂ≠òÂÇ®ÊúçÂä°
	messageStore := services.NewMessageStore(db)
	
	// ÂàõÂª∫ Producer ÁõëÊéßÊúçÂä°
	producerMonitor := services.NewProducerMonitor(db, larkNotifier)
	go producerMonitor.Start()

	// ÂàõÂª∫WebSocket Hub
	wsHub := web.NewHub()
	go wsHub.Run()

	// ÂàõÂª∫Ê∂àÊÅØÁªüËÆ°ËøΩË∏™Âô® (5ÂàÜÈíüÈó¥Èöî)
	statsTracker := services.NewMessageStatsTracker(larkNotifier, 5*time.Minute)
	go statsTracker.StartPeriodicReport()

	// ÂêØÂä®AMQPÊ∂àË¥πËÄÖ
	amqpConsumer := services.NewAMQPConsumer(cfg, messageStore, wsHub)
	
	// ËÆæÁΩÆÊ∂àÊÅØÁªüËÆ°ÂõûË∞É
	amqpConsumer.SetStatsTracker(statsTracker)
	
	go func() {
		if err := amqpConsumer.Start(); err != nil {
			log.Fatalf("AMQP consumer error: %v", err)
			larkNotifier.NotifyError("AMQP Consumer", err.Error())
		}
	}()

	log.Println("AMQP consumer started")

	// ÂêØÂä®WebÊúçÂä°Âô®
	server := web.NewServer(cfg, db, wsHub, larkNotifier)
	
	go func() {
		if err := server.Start(); err != nil {
			log.Fatalf("Web server error: %v", err)
			larkNotifier.NotifyError("Web Server", err.Error())
		}
	}()

	log.Printf("Web server started on port %s", cfg.Port)

	// ÂêØÂä®ÊØîËµõÁõëÊéß (ÊØèÂ∞èÊó∂ÊâßË°å‰∏ÄÊ¨°)
	matchMonitor := services.NewMatchMonitor(cfg, nil)
	
	// Á´ãÂç≥ÊâßË°å‰∏ÄÊ¨°
	go matchMonitor.CheckAndReportWithNotifier(larkNotifier)
	
	// ÂÆöÊúüÊâßË°å
	go func() {
		ticker := time.NewTicker(1 * time.Hour)
		defer ticker.Stop()
		
		for range ticker.C {
			matchMonitor.CheckAndReportWithNotifier(larkNotifier)
		}
	}()
	
	log.Println("Match monitor started (hourly)")
	
	// ÂêØÂä®ËÆ¢ÈòÖÊ∏ÖÁêÜÊúçÂä° (ÊØèÂ∞èÊó∂ÊâßË°å‰∏ÄÊ¨°)
	subscriptionCleanup := services.NewSubscriptionCleanupService(cfg, db, larkNotifier)
	
	// ÂÆöÊúüÊâßË°åÊ∏ÖÁêÜ
	go func() {
		ticker := time.NewTicker(1 * time.Hour)
		defer ticker.Stop()
		
		for range ticker.C {
			if result, err := subscriptionCleanup.ExecuteCleanup(); err != nil {
				log.Printf("[SubscriptionCleanup] ‚ùå Failed: %v", err)
			} else {
				log.Printf("[SubscriptionCleanup] ‚úÖ Completed: %d unbooked out of %d ended", result.Unbooked, result.EndedMatches)
			}
		}
	}()
	
	log.Println("Subscription cleanup started (hourly)")
	
	// ÂÜ∑ÂêØÂä®ÂàùÂßãÂåñ - Ëé∑ÂèñÊâÄÊúâÊØîËµõ‰ø°ÊÅØ
	coldStart := services.NewColdStart(cfg, db, larkNotifier)
	go func() {
		// Á≠âÂæÖ 2 ÁßíÂêéÊâßË°å
		time.Sleep(2 * time.Second)
		
		log.Println("[ColdStart] üöÄ Starting cold start initialization...")
		if err := coldStart.Run(); err != nil {
			log.Printf("[ColdStart] ‚ùå Failed: %v", err)
			larkNotifier.NotifyError("Cold Start", err.Error())
		} else {
			log.Println("[ColdStart] ‚úÖ Cold start completed successfully")
		}
	}()
	
	// ÂêØÂä®Êó∂Ëá™Âä®ËÆ¢ÈòÖ (Live)
	startupBooking := services.NewStartupBookingService(cfg, db, larkNotifier)
	go func() {
		// Á≠âÂæÖ AMQP ËøûÊé•Âª∫Á´ãÂíåÂÜ∑ÂêØÂä®ÂÆåÊàê
		time.Sleep(10 * time.Second)
		
		// 1. ÂÖàÊâßË°åÊ∏ÖÁêÜ,ÂèñÊ∂àÂ∑≤ÁªìÊùüÊØîËµõÁöÑËÆ¢ÈòÖ
		log.Println("[StartupBooking] üßπ Cleaning up ended matches before booking...")
		if cleanupResult, err := subscriptionCleanup.ExecuteCleanup(); err != nil {
			log.Printf("[StartupBooking] ‚ö†Ô∏è  Cleanup failed: %v", err)
		} else {
			log.Printf("[StartupBooking] ‚úÖ Cleanup completed: %d unbooked", cleanupResult.Unbooked)
		}
		
		// 2. ÊâßË°åËá™Âä®ËÆ¢ÈòÖ (Live)
		if result, err := startupBooking.ExecuteStartupBooking(); err != nil {
			log.Printf("[StartupBooking] ‚ùå Failed to execute startup booking: %v", err)
			larkNotifier.NotifyError("Startup Booking", err.Error())
		} else {
			log.Printf("[StartupBooking] ‚úÖ Startup booking completed: %d/%d successful", result.Success, result.Bookable)
		}
	}()
	
	// ÂêØÂä®Êó∂Ëá™Âä®ËÆ¢ÈòÖ (Pre-match)
	prematchService := services.NewPrematchService(cfg, db)
	go func() {
		// Á≠âÂæÖ AMQP ËøûÊé•Âª∫Á´ãÂíåÂÜ∑ÂêØÂä®ÂÆåÊàê
		time.Sleep(15 * time.Second)
		
		log.Println("[PrematchService] üöÄ Starting pre-match event booking...")
		
		if result, err := prematchService.ExecutePrematchBooking(); err != nil {
			log.Printf("[PrematchService] ‚ùå Failed: %v", err)
			larkNotifier.NotifyError("Pre-match Booking", err.Error())
		} else {
			log.Printf("[PrematchService] ‚úÖ Completed: %d total events, %d bookable, %d already booked, %d success, %d failed",
				result.TotalEvents, result.Bookable, result.AlreadyBooked, result.Success, result.Failed)
			
			// ÂèëÈÄÅÈÄöÁü•
			if result.Success > 0 {
				larkNotifier.NotifyPrematchBooking(result.TotalEvents, result.Bookable, result.Success, result.Failed)
			}
		}
	}()

	log.Println("Service is running. Press Ctrl+C to stop.")
	log.Println("All data is sourced from UOF (Unified Odds Feed)")

	// Á≠âÂæÖ‰∏≠Êñ≠‰ø°Âè∑
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("Shutting down service...")

	// Ê∏ÖÁêÜËµÑÊ∫ê
	amqpConsumer.Stop()
	server.Stop()

	log.Println("Service stopped")
}

